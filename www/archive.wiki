<title>Archive</title>

<div id=wikitoc>
<ul>
<li>[./index.wiki|Index]</li>
<li>[./reference.wiki|Reference]</li>
</ul>
<hr style="border-style:solid">
<ul>
<li>[#types|Archives]</li>
<ul>
<li>[#zip|Zip Archive]</li>
<li>[#sqlar|Sqlar Archive]</li>
<li>[#fossil|Fossil Repository]</li>
</ul>
<li>[#web|Web Service]</li>
<li>[#chroot|Chroot Setup]</li>
</ul>
</div>

Jsish supports code execution directly from the following archives:

  *  <b>zip</b>: a .zip file or zip content appended to the end of the jsish executable.
  *  <b>sqlar</b>: a .sqlar database file (extracted from fossil repositories).
  *  <b>fossil</b>: a fossil repository.

To run <b>Ledger</b> from a <b>.zip</b> we use:

    <nowiki><pre class=verbatim>
jsish <b>jsiapp.zip</b> Ledger
</pre></nowiki>

These online demos illustrate different ways of running Jsi apps:

  *  [https://jsish.org/App01/Ledger/html/main.htmli|<b>jsiapp.zip</b>]
  *  [https://jsish.org/App02/Ledger/html/main.htmli|<b>jsiapp.sqlar</b> <i>(chroot)</i>]
  *  [https://jsish.org/App10/Ledger/html/main.htmli|<b>jsiapp.fossil</b> <i>(chroot)</i>]

<h2 id=types>Archives</h2>

An archive generally contains one or more directories, each of which is a package of the same name.
There is also a <b>main.jsi</b> file which is run when an archive is invoked
to run modules or other options.

<h3 id=zip>Zip Archive</h3>

Zip archive support is the simplest and oldest supported archive.  It features:

  *  Native support, so does not require Jsi_Archive.jsi (ie. builtin to <b>jsish</b>).
  *  Mounts are visible within sub-interps.
  *  Zip format is widely used.
  
One downside to the zip format is it's readonly: it does not support in-place updates.

To pull down the head revision of <b>jsiapp</b> use:

    <nowiki><pre class=verbatim>
<b>wget -O jsiapp.zip</b> http://jsish.org/jsiapp/zip
</pre></nowiki>

or you can use:

    <nowiki><pre class=verbatim>
<b>jsish --wget</b> -O jsiapp.zip http://jsish.org/jsiapp/zip
</pre></nowiki>

Alternatively the [http://jsish.org/jsiapp|fossil UI] supports
<b>Zip Archive</b> download.

<h3 id=zip>Sqlar Archive</h3>

The [https://www.sqlite.org/sqlar/doc/trunk/README.md|sqlar] stores compressed files in a small
sqlite database.  Although it is not widely used it is more easily supports updating in-place.

You can pull down the head reversion of <b>jsiapp</b> with:

    <nowiki><pre class=verbatim>
<b>wget -O jsiapp.zip</b> http://jsish.org/jsiapp/zip
</pre></nowiki>

Again the [http://jsish.org/jsiapp|fossil API] supports
<b>Sql Archive</b> download.

<h3 id=zip>Fossil Repository</h3>

Jsish has the ability to run applications directly from downloaded fossil repositories, eg:

    <nowiki><pre class=verbatim>
<b>fossil clone</b> http://jsish.org/jsiapp jsiapp.fossil
</pre></nowiki>

These may then be run with the <b>-a</b> archive option:

    <nowiki><pre class=verbatim>
<b>jsish -a jsiapp.fossil</b> Ledger --help
</pre></nowiki>

<h4 id=update>Updating</h4>

To bring a repository up-to-date use:

    <nowiki><pre class=verbatim>
<b>fossil pull -R jsiapp.fossil
</pre></nowiki>

Or run with the update option:

   <nowiki><pre class=verbatim>
<b>jsish -a -update true jsiapp.fossil</b> Ledger
</pre></nowiki>

<h4 id=versions>Versioning</h4>

Jsish makes use of special tags in the repository to determine which checkin to mount:

  *  <b>ver</b>-<i>M.N</i>: a release version tag.
  *  <b>prereq</b>-<i>M.N</i>: version of Jsish required for a <b>ver</b>-<i>M.N</i> tag.

A <b>prereq</b> tag may be associated only to commits with a <b>ver</b> tag.

Note, versions use the double format, eg.

  *  <b>ver-1.02</b> ==> "1.2"
  *  <b>ver-1.0203</b> ==> "1.2.3"

The rules for determining the default version to mount are:

  *  No <b>prereq</b> or <b>ver</b> tags, the <b>trunk</b> is mounted.
  *  No <b>prereq</b> tags higher than Jsish version, the highest <b>ver</b> tag is mounted.
  *  Else, the highest <b>ver</b> found where <b>prereq</b> is not > Jsish version.

This means it is generally safe to keep repositories up-to-date
without worrying about Jsish dependancies.

Explicit versions can be mounted using:

    <nowiki><pre class=verbatim>
jsish -a <b>-version ver-1.0</b> jsiapp.fossil Ledger
jsish -a <b>-version 2018-09-07</b> jsiapp.fossil Ledger
</pre></nowiki>

For a list of available tags use:

    <nowiki><pre class=verbatim>
fossil <b>tag list</b> -R jsiapp.fossil
</pre></nowiki>

Using fossil provides many more benefits.  Such as easy checking out of source,
apply fixes, and generating dif files to submit bug fixes.
More on this to come.

<h2 id=web>Web Service</h2>

Although Jsi can serve web content directly, on the Internet
it is more common to use <b>nginx</b>
as a reverse proxy via localhost:

    <nowiki><pre class=verbatim>
location /App00/Ledger { proxy_pass http://localhost:8800; include proxy_params; }
</pre></nowiki>
     
And jsish might be invoked as:

    <nowiki><pre class=verbatim>
jsish -a jsiapp.fossil Ledger -port 8800 -urlPrefix /App00/Ledger -noGui true
</pre></nowiki>

Or run via chroot/su.

<h2 id=chroot>Chroot Setup</h2>

Given it's small size, jsish is well suited for chroot deployments.
On the jsish.org site the user <b>jsiusr00</b> was created with directory contents:

    <nowiki><pre class=verbatim_out>
<b>ls -RF jsiusr00</b>
jsiusr00:
bin/  dev/  etc/  ledgerjs.db  tmp/  usr/

jsiusr00/bin:
fossil*  jsish*

jsiusr00/dev:
null  random  urandom

jsiusr00/etc:
hosts  resolv.conf

jsiusr00/tmp:

jsiusr00/usr:
jsiapp.fossil  jsiapp.sqlar  jsiapp.zip  ledgerjs.db
</pre></nowiki>

To scale this up while saving space, multiple users <b>jsiusrNN</b> are created with
readonly files hard-linked to <b>jsiusr00</b>.
Finally <b>chattr +i</b> is used make them immutable. 
Thus incremental size for each additional
user is really only the data file <b>ledgerjs.db</b>.

    <nowiki><pre class=verbatim_out>
<b>du -s jsiusr*</b>
12468	jsiusr00
980	jsiusr01
960	jsiusr02
960	jsiusr03
...
1224	jsiusr10
960	jsiuser11
...
960	jsiuser19
</pre></nowiki>

Note the slight bump in <b>jsiusr10</b> is due to the addition of <b>sh</b>, which supports execing fossil in a chroot.

All previous directories have no shell, so with the addition of quotas and ulimits we end up with a
deployment that is simple but secure. 

