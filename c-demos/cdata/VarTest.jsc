#!/usr/local/bin/jsish -c -test true %s
// Demo of CAPI with structs, enums, vars, maps, etc.

enum Places = {  // An enum with labels and values.
    Home = 1,       // Where the heart is.
    Away = 0        // Visiting team.
};

enum MyDefs = {
    FooSize = 20
};

enum Bitvals = {
    first,
    second,
    third
};

struct Foo = { // My Foo struct.  TODO: Parameters for defn.
    Jsi_Sig     sig;
    int         fld1 = 2;   // An int field with default value of 2
    double      val1;       // A float
    int         arr[9];
    int         bit:4;
    uint64_t    bit2:44;
    int         sint;
    Places      place1 = Home;
    Places      plac:2 = Away;
    STRING8     str8="/mnt/ab ";
};

struct Bar = {  // My Bar struct.
    Jsi_Sig sig; 
    int     bfld1;  // An int field
    double  bval1;  // A float
    int     bbit:4;
    int     barr[9];
    Foo     bfoo[4];
    Foo     foo;
};

struct Fig = { // Third struct
    Jsi_Sig sig;
    int     i;  // 
    Bar     bar; // Sub-sub.
    Bitvals bvals@; //bitset enum.
};

struct Fidx = { // A struct used as index key.
    int key1;        //
    short key2;
};

vars MyVars = {
    Bar     bar;        // Struct Bar.
    Foo     foo;        // Struct Foo.
    Fig     fig;        // Fig struct.
    
    Foo     foos[10];   // Array of Foo structs.
    Foo     foos2[FooSize];// Array of Foo structs with enum size.
    Bar     barss[10];  // Array of Bar

    Bar     bars{};     // Map-Tree with string-key.
    Bar     BN{0};      // Map-Tree with number-key.
    Bar     Bs{@Fidx};   // Map-Tree with struct-key.
    
    Bar     Bs2{#};     // Map-Hash with string-key
    Bar     BN2{#0};    // Map-Hash with number key.  
    Bar     Bs2a{#@Fidx};// Map-Hash with struct-key
};

