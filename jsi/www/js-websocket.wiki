<title>WebSocket</title>
  *  [./reference.wiki#WebSocket]

<h2>WebSocket Javascript Interface</h2>

The WebSocket extension uses libwebsockets to implement
bidirectional socket communication with a web browser.
Used in conjunction with [./js-sqlite.wiki|Sqlite] and [./js-json.wiki|JSON],
web browser based applications are easy to implement.

<h3>Example</h3>

The following creates a minimal client and server using WebSockets.
For more concrete working examples, see [./sampleapps.wiki|the sample apps].

First the server file <b>ws.js</b>:

    <nowiki><pre class=verbatim>
<b>function</b> ws_input(data, id) {
    <b>puts</b>(<i>"ws_input: "</i> + id + <i>": "</i> + data);
};

<b>var</b> ws = <b>new WebSocket</b>({callback:ws_input});
<b>var</b> msg = { str:<i>"whos there?"</i>, cnt:0 };
<b>while</b> (true) {
    <b>Event.update</b>(1);
    if ((msg.cnt++ % 10) == 0)
       <b>ws.send</b>(<b>JSON.stringify</b>(msg));
}
</pre></nowiki>

Next the client file: <b>wsc.js</b>:

    <nowiki><pre class=verbatim>
<b>function</b> wsc_input(data) {
    <b>puts</b>(<i>"wsc_input: "</i> + data);
};

<b>var</b> ws = <b>new WebSocket</b>({client:true, callback:wsc_input});
<b>var</b> msg = { str:<i>"knock knock"</i>, cnt:0 };

<b>while</b> (true) {
    msg.cnt++;
    <b>ws.send</b>(<b>JSON.stringify</b>(msg));
    <b>Event.update</b>(1);
}
</pre></nowiki>

Which we run with:

    <nowiki><pre class=verbatim>
<b>jsish</b> ws.js &
<b>jsish</b> wsc.js
</pre></nowiki>

