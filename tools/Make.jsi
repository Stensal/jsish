#!/usr/local/bin/jsish -M -file %s
// Makefile for building jsish: controlled by make.conf from configure. UNFINISHED

var TARGET='unix',
    PREFIX='/usr/local',
    BUILDSYS = exec('uname -o'),
    BUILDDIR = File.pwd(),
    MAKEFILE='Makefile',
    CMAKE='cmake',
    PROGRAM='jsish',
    MAKECONF='make.conf',
    EXEEXT='',
    WEBSOCKDIR = 'websocket',
    WEBSOCKSRC = WEBSOCKDIR + '/src',
    SQLITEDIR = 'sqlite',
    USECMAKE=0,
    WIN=0,
    ACFILES = 'parser.c ',
    //ACFILES    = 'jsiParser.c ',
    PCFILES = 'jsiLexer.c jsiFunc.c jsiValue.c jsiRegexp.c jsiPstate.c jsiInterp.c '
        + 'jsiUtils.c jsiProto.c jsiFilesys.c jsiChar.c jsiString.c jsiBool.c '
        + 'jsiNumber.c jsiArray.c jsiLoad.c jsiHash.c jsiOptions.c jsiStubs.c '
        + 'jsiFormat.c jsiJSON.c jsiCmds.c jsiFileCmds.c jsiObj.c jsiSignal.c '
        + 'jsiTree.c jsiCrypto.c jsiDString.c jsiMath.c jsmn.c jsiZvfs.c jsiUtf8.c jsiUserObj.c '
        + 'jsiSocket.c jsiSqlite.c jsiWebSocket.c jsiMySql.c jsiCData.c ',
    CFILES = PCFILES + ACFILES,
    EFILES = 'jsiEval.c ',
    WFILES = 'win/compat.c win/strptime.c ',
    WIFILES = 'win/compat.h ',
    REFILES = 'regex/regex.h regex/tre.h regex/regcomp.c  regex/regerror.c  regex/regexec.c regex/tre-mem.c ',
    HFILES = 'parser.h jsiInt.h ',
    OBJS = CFILES.map(['.c','.o']) + EFILES.map(['.c','.o']),
    CONF_ARGS='', PROGLDFLAGS='', STATICLIBS='', WEBSOCKLIB='', SQLITELIB='', LNKFLAGS='',
    COPTS='', MINIZDIR='.', PROGFLAGS='',
    JSI__MINIZ=0,
    XCPREFIX='',
    //PROGLDFLAGS += USERLIB+' ',
    SHLEXT='.so',
    ZIPDIR='zipdir',
    PROGBINMIN = './jsimin',
    PROGBINA   = PROGRAM+'_'+EXEEXT,
    PROGBIN    = PROGRAM+EXEEXT,
    PWD=File.pwd(),
    JSI_PKG_DIRS=BUILDDIR+'/lib,'+PREFIX+'/lib/jsi';

eval($.readConf(MAKECONF));

// Global vars.
$.YACC    = 'bison -v';
$.LDFLAGS = '-lm ';
$.CFLAGS  += COPTS;
$.CFLAGS  += ' -I. -Wall -Wsign-compare -Wtype-limits -Wuninitialized ';
$.CFLAGS  += ' -g -Og -O0 ';
// -pg
//$.CFLAGS += ' -g -O3 ',
//$.CFLAGS += '-g -Og -g3 ',
$.CFLAGS += '-DJSI_PKG_DIRS=\\\"'+JSI_PKG_DIRS+'\\\" -DJSI_CONF_ARGS=\\\"'+CONF_ARGS+'\\\" ';

if (!JSI_CONFIG_DEFINED)
    throw("ERROR!!!!!!!!!  NEED TO $.run: ./configure");

if (TARGET == 'win')
    JSI__REGEX=1;


if (JSI__REGEX) {
    $.CFLAGS += '-Iregex ';
    CFILES += 'regex/regcomp.c  regex/regerror.c  regex/regexec.c regex/tre-mem.c ';
    //HFILES += 'regex/regex.h regex/tre.h ';
}

if (LINKSTATIC)
    PROGLDFLAGS += '-static ';


if (JSI__SANITIZE) {
    $.CFLAGS += '-fsanitize=address ';
    Util.setenv('ASAN_OPTIONS','abort_on_error=1 ');
}

if (WITH_EXT_WEBSOCKET) {    
    PROGFLAGS += ' -DJSI__WEBSOCKET=1 ';
    if (BUILDIN_WEBSOCKET) {
        WEBSOCKLIB = WEBSOCKDIR + '/build/'+TARGET+'/libwebsockets.a';
        $.CFLAGS += '-I'+WEBSOCKSRC + '/lib  -I'+WEBSOCKSRC+'/build -Iwebsocket/'+TARGET+' ';
        STATICLIBS += WEBSOCKLIB+' ';
    } else
        WEBSOCKLIB = '-lwebsockets';
}


if (WITH_EXT_SQLITE) {
    if (!BUILDIN_SQLITE)
        SQLITELIB = '-lsqlite3';
    else {
        SQLITELIB = SQLITEDIR + '/build/'+TARGET+'/libsqlite3.a';
        $.CFLAGS += '-I'+SQLITEDIR+'/src ';
    }
}

PROGFLAGS += '-DJSI__SQLITE=1 ';

if (DB_TEST)
    PROGFLAGS += '-DJSI_DB_TEST=1 ';

if (WITH_EXT_MYSQL) {
    PROGLDFLAGS += '-lmysqlclient ';
    PROGFLAGS += '-DJSI__MYSQL=1 ';
}

if (EXTNAME) {
    CFILES += EXTNAME+'.c ';
    PROGFLAGS += '-DJSI_USER_EXTENSION=Jsi_Init'+EXTNAME+' ';
}

if (TARGET === 'win') {
    // *********** WINDOWS *****************
    WIN=1;
    $.CFLAGS += '-D__USE_MINGW_ANSI_STDIO=1 -Wno-format ';

    // Setup cross-compiler for windows.
    if (XCPREFIX === '')
        XCPREFIX='i686-w64-mingw32-';
    if (!Which(XCPREFIX+'gcc'))
        XCPREFIX='x86_64-w64-mingw32-';

    OPT_SOCKET=0;
    OPT_READLINE=0;
    
    EXEEXT='.exe';
    CFILES += WFILES + SQLITEDIR+'/src/sqlite3.c ';
    
    if (WITH_EXT_WEBSOCKET) {
        //for windows without websock use miniz
    
        if (!JSI__MINIZ) {
            JSI__MINIZ=1;
            PROGFLAGS += 'JSI__MINIZ=1 ';
        }
    
    } else {
        WEBSOCKLIB= WEBSOCKDIR+'/build/'+TARGET+'/libwebsockets.a';
        PROGLDFLAGS += WEBSOCKLIB + ' -lwsock32 -lws2_32 ';
    }
    STATICLIBS += SQLITELIB +' '+WEBSOCKLIB+' ';
    if (JSI__THREADS)
        PROGLDFLAGS += '-lpthread -static ';

} else {
    //*********** UNIX **********************
    if (BUILDSYS != 'FreeBSD')
        $.CFLAGS += '-frecord-gcc-switches ';

    STATICLIBS += SQLITELIB+' ';
    PROGLDFLAGS += WEBSOCKLIB+' ';
    
    if (JSI__LOAD) {
        LNKFLAGS += '-rdynamic ';
        COPTS = '-fpic ';
        if (BUILDSYS != 'FreeBSD')
            PROGLDFLAGS += '-ldl ';
    }
    
    if (JSI__THREADS)
        PROGLDFLAGS += '-lpthread ';
}

if (BUILDSYS == 'FreeBSD')
    $.CC=XCPREFIX+'cc';
else
    $.CC=XCPREFIX+'gcc';

$.AR=XCPREFIX+'ar';
$.LD=XCPREFIX+'ld';

if (TARGET == 'musl') {
    PROGFLAGS += '-DJSI__MUSL ';
    $.CC='musl-gcc';
}

if (!$.which($.CC))
    throw('ERROR: Compiler not found '+CC+': try setting with "./configure --xcprefix"');

if (JSI__READLINE) {
    CFILES += 'linenoise.c ';
    HFILES += 'linenoise.h ';
    if (JSI__GNUREADLINE)
        PROGLDFLAGS += '-lreadline -lncurses ';
}

MINIZDIR='miniz';
if (JSI__MINIZ) {
    CFILES += MINIZDIR+'/miniz.c ';
    $.CFLAGS += '-I'+PWD+'/'+MINIZDIR+' ';
} else if (!WIN)
    PROGLDFLAGS += '-lz ';

//PROGLDFLAGS += USERLIB+' ';
$.LDFLAGS += PROGLDFLAGS+' ';
$.CFLAGS  += COPTS+PROGFLAGS;
OBJS    = CFILES.map(['.c','.o']) + EFILES.map(['.c','.o']);

// RULES

:'all': STATICLIBS+' '+PROGBIN:

//:'.PHONY':'all clean cleanall remake':

:'help'::{
    puts("targets are: mkwin mkmusl shared jsishs stubs ref test testmem release");
};


/*:'%.o':'%.c':{
    $.run($.CC+' -c -o '+DST+' '+SRC+' '+$.CFLAGS);
};*/

$.readDepends('.depend');

:'depend'::{
    $.run($.CC+' -E -MM -DJSI__WEBSOCKET=1 -DJSI__SQLITE -DJSI__MYSQL '+$.CFLAGS+' '+CFILES+' '+EFILES+' > .depend');
};

//:'main.o':'main.c':

//$(OBJS) : $(MAKEFILE) $(MAKECONF)

:'libjsi.a'::{
    $.run($.AR+' r '+DST+' '+ OBJS);
};

:'modules': BUILDMODS:

:PROGBINA: 'parser.c '+OBJS + 'main.o libjsi.a modules':{
    $.run($.AR+' r libjsi.a '+OBJS);
    $.run($.CC+' '+$.CFLAGS + OBJS+SQLITELIB+ ' main.o '+LNKFLAGS+' -o '+PROGBINA+' '+$.LDFLAGS);
    //MAKESUB('modules');
    //MAKETARGET(DST, 'modules');
};

//jsishs$(EXEEXT): parser.c $(OBJS) main.o
//    $(CC) $(CFLAGS) main.o -o $@ -L. -ljsi $(LDFLAGS) -lsqlite3 $(LOADLIB) $(THREADLIB)

:'shared': 'libjsi'+SHLEXT+ ' '+ 'jsish'+EXEEXT:

:PROGBIN:PROGBINA+'':{
    if (!JSI__ZIPLIB)
       $.run('cp -f '+PROGBINA+' '+ PROGBIN);
    else {
        $.run('rm -f '+DST);
        $.run('cp '+PROGBINA+' '+DST);
        if (File.exists('../.fslckout'))
            $.run('fossil info | grep ^checkout | cut -b15- > lib/sourceid.txt');
;       $.run(PROGBINMIN+' lib/Zip.jsi create '+DST+' '+ZIPDIR+' lib');
    }
    puts("Congratulations, build is now complete. Test with './jsish -u tests'");
};

:'apps': 'ledger.zip':
//apps: sqliteui$(EXEEXT)

:'ledger.zip'::{
    //.FORCE
    $.run('rm '+DST);
    $.run('cd ../Ledger && zip -r  ../jsi/'+DST+' .');
};

:'sqliteui'+EXEEXT::{
    $.run('cp '+PROGBINA+' '+ DST);
    $.run(PROGBINMIN+' lib/Zip.jsi create  '+DST+' ../sqliteui lib');
};

:'libwebsocket': WEBSOCKLIB:

:WEBSOCKLIB::{
    $.run($.MAKE+' -C '+WEBSOCKDIR+' CC='+$.CC+' AR='+$.AR+' WIN='+WIN+' TARGET='+TARGET+' USECMAKE='+USECMAKE+' MINIZ='+JSI__MINIZ);
};

:SQLITELIB::{
    $.run($.MAKE+' -C '+SQLITEDIR+' CC='+$.CC+' AR='+$.AR+' WIN='+WIN+' TARGET='+TARGET);
};

:'libjsi'+SHLEXT:OBJS:{
    $.run($.CC+' '+CFLAGS+OBJS+' -Wl,--export-dynamic  -shared -o '+DST+' '+$.LDFLAGS);
};

// Supported modules (unix only)
:'mysql': 'MySql'+SHLEXT:
:'MySql'+SHLEXT : 'jsiMySql.c':{
    $.run($.CC+' '+$.CFLAGS+PROGFLAGS+MODFLAGS+' jsiMySql.c -Wl,--export-dynamic  -shared -o '+DST+' '+$.LDFLAGS+' -lmysqlclient', true);
};

:'sqlite': 'Sqlite'+SHLEXT:
:'Sqlite'+SHLEXT:'jsiSqlite.c':{
    $.run($.CC+' '+$.CFLAGS+PROGFLAGS+MODFLAGS+' jsiSqlite.c -Wl,--export-dynamic  -shared -o '+DST+' '+$.LDFLAGS+' -lsqlite3', true);
};

:'websocket': 'WebSocket'+SHLEXT:
:'WebSocket'+SHLEXT: 'jsiWebSocket.c':{
    $.run($.CC+' '+$.CFLAGS+PROGFLAGS+MODFLAGS+' jsiWebSocket.c -Wl,--export-dynamic  -shared -o '+DST+' '+LDFLAGS+' -lwebsockets', true);
};

:'parser.c': 'parser.y':{
    $.run($.YACC+' -oparser.c -d parser.y');
};

:'jsiParser.c': 'jsiParser.y':{
    $.run('lemon jsiParser.y', true);
};

// Create the single amalgamation file jsi.c
:'jsi.c': 'jsi.h '+REFILES+' '+HFILES+CFILES+MAKEFILE+' '+MAKECONF:{
    var str = File.read('jsi.h')
        + "#ifndef JSI_IN_AMALGAMATION\n"
        + "#define JSI_IN_AMALGAMATION\n"
        + "#define _GNU_SOURCE\n" 
        + "#define JSI_AMALGAMATION\n"
        + "#if JSI__MINIZ==1\n"
        + File.read(MINIZDIR+'/miniz.c')+"\n"
        + "#endif //JSI__MINIZ==1\n"
        + "#if JSI__READLINE==1\n"
        + File.read('linenoise.c')+"\n"
        + "#endif //JSI__READLINE==1\n"
        + "struct jsi_Pstate;\n"
        + exec('cat '+ WIFILES+REFILES+HFILES+' jsiCode.c '+PCFILES+' | grep -v "^#line"')+"\n"
        + "#ifndef JSI_LITE_ONLY\n"
        + exec('grep -v "^#line" '+ ACFILES)+"\n"
        + "#endif //JSI_LITE_ONLY\n"
        + exec('cat '+WFILES+EFILES) +"\n"
        + "#if JSI__MAIN==1\n"
        + File.read('main.c')
        + "#endif //JSI__MAIN==1\n"
        + "#endif //JSI_IN_AMALGAMATION\n";
        File.write(DST, str);
};

// Create the single compile file jsiOne.c
:'jsiOne.c': 'jsi.h  '+REFILES+HFILES+CFILES+MAKEFILE+' '+MAKECONF:{
    var ii, sl;
    var str = '#include "jsi.h"\n' 
        + "#define JSI_AMALGAMATION\n"
        + "#if JSI__MINIZ==1\n"
        + '#include "'+MINIZDIR+'/miniz.c"\n'
        + "#endif\n"
        + "#if JSI__READLINE==1\n"
        + '#include "linenoise.c"\n'
        + "#endif\n"
        + "struct jsi_Pstate;\n";
    sl = REFILES+HFILES+'jsiCode.c '+PCFILES;
    for (ii of sl.trim().split())
        str += '#include "'+ii+'"\n';
    str += "#ifndef JSI_LITE_ONLY\n";
    for (ii of ACFILES.trim().split())
        str += '#include "'+ii+'"\n';
    str += "#endif\n";
    sl = WFILES+EFILES;
    for (ii of sl.trim().split())
        str += '#include "'+ii+'"\n';
    str += "#if JSI__MAIN==1\n"
        + '#include "main.c"\n' 
        + "#endif\n";
    File.write(DST, str);
};

:'stubs'::{
    $.run('./'+PROGBIN+' tools/mkstubs.jsi');
};

:'ref'::{
    $.run('./'+PROGBIN+' tools/mkproto.jsi > tools/protos.jsi');
    $.run($.MAKE+' -C www');
};

:'release': 'stubs ref jsi.c jsiOne.c':

:'printconf'::{
    puts(EXPECT_CONFIG_VER);
};

:'test'::{
    $.run(Info.executable()+' -u tests');
};
    
:'remake':['clean', 'all']:

:'clean'::{
    $.run('rm -rf *.o *.a jsish '+MINIZDIR+'/*.o win/*.o regex/*.o');
    $.run($.MAKE+' -C sqlite clean');
    $.run($.MAKE+' -C websocket clean');
};

:'cleanall': 'clean':{
    $.run('rm -f '+ACFILES+' '+PROGBINA+' core parser.c parser.h parser.tab.c jsimin jsish *.so '+PROGBINMIN);
    $.run(MAKE+' -C sqlite cleanall');
    $.run(MAKE+' -C websocket cleanall');
};

/*
# This requires building with memdebug.
testmem:
    JSI_INTERP_OPTS='{memDebug:1}' ./jsish -u tests

testwall:
    JSI_INTERP_OPTS='{typeCheck:["strict"], strict:true}' ./jsish -u tests

testvg:
    tools/testjs.sh -jsish ./jsish -valgrind tests

setup:
    egrep -s 'complete -f '.*jsish' ~/.bashrc || echo "complete -W '-h --help -v --version -d --debug -DST --debugui -u --unittest -s --safe -Z --zip -S --sqliteui -W --websrv -H --htmli -J --jsi -c --cdata -C --cssi -m --module -e --eval -t --tracecall -T --typecheck -t --tracecall' -f '*.jsi'  'jsish'\n" >> ~/.bashrc

tags:
    geany -g -P geany.tags *.c *.h

install: all
    mkdir -p $(PREFIX)/bin $(PREFIX)/lib/jsi $(PREFIX)/include
    cp jsish jsimin $(PREFIX)/bin
    cp tools/jsish-c $(PREFIX)/bin
    cp jsi.h jsiStubs.h $(PREFIX)/include
    cp -f Sqlite$(SHLEXT) WebSocket$(SHLEXT) Socket$(SHLEXT) MySql$(SHLEXT) $(PREFIX)/lib/jsi

JSIMINVER=$(shell test -x ./jsimin && ./jsimin -v | cut -d' ' -f2)
JSICURVER=$(shell fgrep 'define JSI_VERSION_' jsi.h | cut -b29- | xargs | sed 's/ /./g')
CURCONFVER=$(shell test -f make.conf && fgrep DEFCONFIG_VER make.conf | cut -d= -f2)

checkjsiminver:
ifneq ($(JSIMINVER), $(JSICURVER))
    @echo "jsimin version mismatch"
    rm -f jsimin
endif

checkcfgver:
ifneq ($(CURCONFVER), $(JSICURVER))
    @echo "NOTE: version changed since last run of configure: $(CURCONFVER) != $(JSICURVER)"
endif

*/

